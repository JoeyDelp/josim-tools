{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation JoSIM Tools is a set of tools that does analysis on Superconducting Single Flux Quantum Circuits. JoSIM Tools is built on JoSIM and leverages pyjosim . The tools currently include verification, margin analysis, yield analysis, and optimization routines. The full documentation can be found on the JoSIM Tools Github Pages Motivation Existing tools require specialized format, are difficult to use, are not configurable, are slow, or have shortcoming in the method used. Goal A tool which does analysis and optimization of SFQ circuits while being: Reasonably effecient Configurable Programmatically extendable Usage Example JoSIM tools takes a single configuration file as input which describes the analysis mode = \"margin\" [parameters] Btotal = { \"nominal\" = 1 } Ltotal = { \"nominal\" = 1 } Itotal = { \"nominal\" = 1 } [verify] method = \"spec_file\" circuit = \"data/test_splitt_changed_sym.js\" file = \"data/test_splitt_changed_sym.sp\" The configuration file description is described in the Configuration File Section $ josim-tools margin/simple_margin_analysis.toml Btotal: 18.3 [ #####|# ] 7.0 Ltotal: 29.5 [ ########|###### ] 23.9 Itotal: 7.0 [ #|##### ] 21.1 Critical margin: 7.0 % ['Btotal+', 'Itotal-'] Alternatives PSCAN2/COWBoy MALT xopt Cadance AAO Installation Install pyjosim Then install poetry $ pip install poetry Then simply clone, build and install josim-tools $ git clone https://github.com/pleroux0/josim-tools $ cd josim-tools $ poetry build --format = wheel $ pip install dist/josim_tools-0.1.0-py3-none-any.whl License This software is licensed under the BSD-2-Clause license. See LICENSE.md for more details.","title":"Documentation"},{"location":"#documentation","text":"JoSIM Tools is a set of tools that does analysis on Superconducting Single Flux Quantum Circuits. JoSIM Tools is built on JoSIM and leverages pyjosim . The tools currently include verification, margin analysis, yield analysis, and optimization routines. The full documentation can be found on the JoSIM Tools Github Pages","title":"Documentation"},{"location":"#motivation","text":"Existing tools require specialized format, are difficult to use, are not configurable, are slow, or have shortcoming in the method used.","title":"Motivation"},{"location":"#goal","text":"A tool which does analysis and optimization of SFQ circuits while being: Reasonably effecient Configurable Programmatically extendable","title":"Goal"},{"location":"#usage-example","text":"JoSIM tools takes a single configuration file as input which describes the analysis mode = \"margin\" [parameters] Btotal = { \"nominal\" = 1 } Ltotal = { \"nominal\" = 1 } Itotal = { \"nominal\" = 1 } [verify] method = \"spec_file\" circuit = \"data/test_splitt_changed_sym.js\" file = \"data/test_splitt_changed_sym.sp\" The configuration file description is described in the Configuration File Section $ josim-tools margin/simple_margin_analysis.toml Btotal: 18.3 [ #####|# ] 7.0 Ltotal: 29.5 [ ########|###### ] 23.9 Itotal: 7.0 [ #|##### ] 21.1 Critical margin: 7.0 % ['Btotal+', 'Itotal-']","title":"Usage Example"},{"location":"#alternatives","text":"PSCAN2/COWBoy MALT xopt Cadance AAO","title":"Alternatives"},{"location":"#installation","text":"Install pyjosim Then install poetry $ pip install poetry Then simply clone, build and install josim-tools $ git clone https://github.com/pleroux0/josim-tools $ cd josim-tools $ poetry build --format = wheel $ pip install dist/josim_tools-0.1.0-py3-none-any.whl","title":"Installation"},{"location":"#license","text":"This software is licensed under the BSD-2-Clause license. See LICENSE.md for more details.","title":"License"},{"location":"alternatives/","text":"Alternatives PSCAN2/COWBoy DIFFERENCES : Much more than analysis tools (Wider scope) PRO : Library first design Has a GUI for non-power users CON : Our tests show poor performance compared to other SPICE engines, but milage may vary Documentation is poor. Have to look at code to understand and use properly. Margin analysis limited to binary search Releases are not consistent between windows/linux and source code lags releases Optimizer works in fixed step sizes and runs a sequence of single parameter optimizations. Works well in certain cases, but returns far from optimal values in other cases. Articles : MALT Inscirbed Hypersheres xopt Center of Gravity Method Cadence AAO Randomize components close to the failure","title":"Alternatives"},{"location":"alternatives/#alternatives","text":"","title":"Alternatives"},{"location":"alternatives/#pscan2cowboy","text":"DIFFERENCES : Much more than analysis tools (Wider scope) PRO : Library first design Has a GUI for non-power users CON : Our tests show poor performance compared to other SPICE engines, but milage may vary Documentation is poor. Have to look at code to understand and use properly. Margin analysis limited to binary search Releases are not consistent between windows/linux and source code lags releases Optimizer works in fixed step sizes and runs a sequence of single parameter optimizations. Works well in certain cases, but returns far from optimal values in other cases. Articles :","title":"PSCAN2/COWBoy"},{"location":"alternatives/#malt","text":"Inscirbed Hypersheres","title":"MALT"},{"location":"alternatives/#xopt","text":"Center of Gravity Method","title":"xopt"},{"location":"alternatives/#cadence-aao","text":"Randomize components close to the failure","title":"Cadence AAO"},{"location":"configuration_file/","text":"Configuration File Format The configuration is a TOML file with a specific table structure. The general idea is that a mode, method or type is specified which dictates what should be in the current table. Any unused tables or values are considered invalid. Modes Currently the following modes are supported: verify - Verify if a circuit works yield - Perform a yield analysis on a circuit margin - Perform a margin analysis on a circuit optimize - Optimizate a circuit Example: mode = \"verify\" Verify Does verification if a circuit works. Consists of a single verify table that specifies how the circuit works Verify Table Currently the following method(s) are supported: spec - Verifies a circuit with a specification file Currently only validation based on spec files are supported. The same validation as done by Mark Volkman's tools . More verification methods are intended to be added to josim-tools in the future. Example: [verify] method = \"spec\" Specification File Verification The specification file verifier runs a simulation and checks the number of times a junction has switched at certain time steps against the specification. When this method is specified the following table entries are requires: file - A string representing the path to the specification file which describes how the circuit should operate. circuit - A string representing the path to the circuit testbench file. When this method is specified the following table entries are optional: threshold - A value specifying how close the phase jumps should be to 2 \\pi for it to be considered stable output. When not specified it defaults to 0.05 ( 5~\\% of 2\\pi ). Spec file format The specification starts with a line that describes the junctions that are being checked. The format requires that the file start with time followed all the junction names. Junctions can be in subcircuits and are referred to by the appropriate trace name as output by JoSIM. The following line is the calibration line. It is the time followed by the initial switch counts. It allows one to ignore the phase contribution from the bias currents and set starting switch counts. The number of switches specified must match the number of names specified in the name line. The next line(s) is a variable number of data lines specifiying the time at which switch counts must be valid. It starts with a single time value followed by the required switch counts. The number of switches specified must match the number of names specified in the name line. time : REAL ; switches : INTEGER ; name : STRING ; name_line : 'time' ( WHITESPACE + name )* WHITESPACE * NEWLINE ; calibration_line : time ( WHITESPACE + switches )* WHITESPACE * NEWLINE ; data_line : time ( WHITESPACE + switches )* WHITESPACE * NEWLINE ; file : name_line calibration_line data_line + ; Example configuration: [verify] method = \"spec\" circuit = \"data/test_splitt_changed_sym.js\" spec_file = \"data/test_splitt_changed_sym.sp\" Example spec file: time B01TX1 B01TX2 B1 B2 B3 B03|X0RX B03|X0RX2 4.00E-011 0 0 0 0 0 0 0 1.47E-010 1 1 1 1 1 0 0 1.66E-010 1 1 1 1 1 1 1 2.36E-010 2 2 2 2 2 1 1 2.55E-010 3 3 3 3 3 2 2 2.74E-010 3 3 3 3 3 3 3 Example visualization: Margin Does a margin analysis of a circuit. Consists of a verify table , a margin table , and a margin parameters table that specifies how the margin analysis should be done. Margin table Specifies how a margin analysis should be done. The following table entries are optional: max_search - A number specifying the upper boundary of the margin analysis. When not specified it defaults to 1.9 ( 1 + 90~\\% ). min_search - A number specifying the lower boundary of the margin analysis. When not specified it defaults to 0.1 ( 1 - 90~\\% ). scan_steps - A positive integer specifying the number of scanning steps the margin analysis should take. When not specified it defaults to 4 . binary_search_steps - A positive integer specifying the number of binary search steps the margin analysis should do. When not specified defaults to 3 . Margin parameters table A table specifying the parameters to do margin analysis on. Each entry in the table is a margin parameter table whose key is the name of the parameter. Margin parameter table A table specifying how a margin parameter should look The following Yield Does a yield analysis of a circuit. Consists of a verify table , a yield table , and a yield parameters table that specifies how the yield analysis should be done. Yield table Specifies how a yield analysis should be done. The following table entries are required: num_samples - A positive integer that specifies how many samples the yield analysis should do. Yield parameters table A table specifying the parameters to do yield analysis on. Each entry in the table is a yield parameter table whose key is the name of the parameter. Yield parameter table Optimize Optimizes the circuit paramters. Consists of a verify table , a margin table , an optimize table and a optimize parameters table that specifies how the optimization should performed. Optimize table Hybrid optimization When this method is specified the following table entries are optional: search_radius - How large area should be searched surrounding the current best guess for the next guess. If not specified it defaults to 0.05 (A 5~\\% wide square around the nominal values of the current best point). converge - How close the estimated guess score should be to the analysed guess score for converge. If not specified it defaults to 0.01 ( 1~\\% ). max_iterations - A positive integer representing the maximum number of guesses the optimization routine will make before terminating due to maximum iteration count. If not specified it defaults to 1000 . Optimize parameters table A table specifying the parameters to do optimization analysis on. Each entry in the table is a optimization parameter table whose key is the name of the parameter. Optimize parameter table When this method is specified the following table entries are optional: search_radius - How large area should be searched surrounding the current best guess for the next guess. If not specified it defaults to 0.05 (A 5~\\% wide square around the nominal values of the current best point). converge - How close the estimated guess score should be to the analysed guess score for converge. If not specified it defaults to 0.01 ( 1~\\% ).","title":"Configuration File Format"},{"location":"configuration_file/#configuration-file-format","text":"The configuration is a TOML file with a specific table structure. The general idea is that a mode, method or type is specified which dictates what should be in the current table. Any unused tables or values are considered invalid.","title":"Configuration File Format"},{"location":"configuration_file/#modes","text":"Currently the following modes are supported: verify - Verify if a circuit works yield - Perform a yield analysis on a circuit margin - Perform a margin analysis on a circuit optimize - Optimizate a circuit Example: mode = \"verify\"","title":"Modes"},{"location":"configuration_file/#verify","text":"Does verification if a circuit works. Consists of a single verify table that specifies how the circuit works","title":"Verify"},{"location":"configuration_file/#verify-table","text":"Currently the following method(s) are supported: spec - Verifies a circuit with a specification file Currently only validation based on spec files are supported. The same validation as done by Mark Volkman's tools . More verification methods are intended to be added to josim-tools in the future. Example: [verify] method = \"spec\"","title":"Verify Table"},{"location":"configuration_file/#specification-file-verification","text":"The specification file verifier runs a simulation and checks the number of times a junction has switched at certain time steps against the specification. When this method is specified the following table entries are requires: file - A string representing the path to the specification file which describes how the circuit should operate. circuit - A string representing the path to the circuit testbench file. When this method is specified the following table entries are optional: threshold - A value specifying how close the phase jumps should be to 2 \\pi for it to be considered stable output. When not specified it defaults to 0.05 ( 5~\\% of 2\\pi ).","title":"Specification File Verification"},{"location":"configuration_file/#spec-file-format","text":"The specification starts with a line that describes the junctions that are being checked. The format requires that the file start with time followed all the junction names. Junctions can be in subcircuits and are referred to by the appropriate trace name as output by JoSIM. The following line is the calibration line. It is the time followed by the initial switch counts. It allows one to ignore the phase contribution from the bias currents and set starting switch counts. The number of switches specified must match the number of names specified in the name line. The next line(s) is a variable number of data lines specifiying the time at which switch counts must be valid. It starts with a single time value followed by the required switch counts. The number of switches specified must match the number of names specified in the name line. time : REAL ; switches : INTEGER ; name : STRING ; name_line : 'time' ( WHITESPACE + name )* WHITESPACE * NEWLINE ; calibration_line : time ( WHITESPACE + switches )* WHITESPACE * NEWLINE ; data_line : time ( WHITESPACE + switches )* WHITESPACE * NEWLINE ; file : name_line calibration_line data_line + ; Example configuration: [verify] method = \"spec\" circuit = \"data/test_splitt_changed_sym.js\" spec_file = \"data/test_splitt_changed_sym.sp\" Example spec file: time B01TX1 B01TX2 B1 B2 B3 B03|X0RX B03|X0RX2 4.00E-011 0 0 0 0 0 0 0 1.47E-010 1 1 1 1 1 0 0 1.66E-010 1 1 1 1 1 1 1 2.36E-010 2 2 2 2 2 1 1 2.55E-010 3 3 3 3 3 2 2 2.74E-010 3 3 3 3 3 3 3 Example visualization:","title":"Spec file format"},{"location":"configuration_file/#margin","text":"Does a margin analysis of a circuit. Consists of a verify table , a margin table , and a margin parameters table that specifies how the margin analysis should be done.","title":"Margin"},{"location":"configuration_file/#margin-table","text":"Specifies how a margin analysis should be done. The following table entries are optional: max_search - A number specifying the upper boundary of the margin analysis. When not specified it defaults to 1.9 ( 1 + 90~\\% ). min_search - A number specifying the lower boundary of the margin analysis. When not specified it defaults to 0.1 ( 1 - 90~\\% ). scan_steps - A positive integer specifying the number of scanning steps the margin analysis should take. When not specified it defaults to 4 . binary_search_steps - A positive integer specifying the number of binary search steps the margin analysis should do. When not specified defaults to 3 .","title":"Margin table"},{"location":"configuration_file/#margin-parameters-table","text":"A table specifying the parameters to do margin analysis on. Each entry in the table is a margin parameter table whose key is the name of the parameter.","title":"Margin parameters table"},{"location":"configuration_file/#margin-parameter-table","text":"A table specifying how a margin parameter should look The following","title":"Margin parameter table"},{"location":"configuration_file/#yield","text":"Does a yield analysis of a circuit. Consists of a verify table , a yield table , and a yield parameters table that specifies how the yield analysis should be done.","title":"Yield"},{"location":"configuration_file/#yield-table","text":"Specifies how a yield analysis should be done. The following table entries are required: num_samples - A positive integer that specifies how many samples the yield analysis should do.","title":"Yield table"},{"location":"configuration_file/#yield-parameters-table","text":"A table specifying the parameters to do yield analysis on. Each entry in the table is a yield parameter table whose key is the name of the parameter.","title":"Yield parameters table"},{"location":"configuration_file/#yield-parameter-table","text":"","title":"Yield parameter table"},{"location":"configuration_file/#optimize","text":"Optimizes the circuit paramters. Consists of a verify table , a margin table , an optimize table and a optimize parameters table that specifies how the optimization should performed.","title":"Optimize"},{"location":"configuration_file/#optimize-table","text":"","title":"Optimize table"},{"location":"configuration_file/#hybrid-optimization","text":"When this method is specified the following table entries are optional: search_radius - How large area should be searched surrounding the current best guess for the next guess. If not specified it defaults to 0.05 (A 5~\\% wide square around the nominal values of the current best point). converge - How close the estimated guess score should be to the analysed guess score for converge. If not specified it defaults to 0.01 ( 1~\\% ). max_iterations - A positive integer representing the maximum number of guesses the optimization routine will make before terminating due to maximum iteration count. If not specified it defaults to 1000 .","title":"Hybrid optimization"},{"location":"configuration_file/#optimize-parameters-table","text":"A table specifying the parameters to do optimization analysis on. Each entry in the table is a optimization parameter table whose key is the name of the parameter.","title":"Optimize parameters table"},{"location":"configuration_file/#optimize-parameter-table","text":"When this method is specified the following table entries are optional: search_radius - How large area should be searched surrounding the current best guess for the next guess. If not specified it defaults to 0.05 (A 5~\\% wide square around the nominal values of the current best point). converge - How close the estimated guess score should be to the analysed guess score for converge. If not specified it defaults to 0.01 ( 1~\\% ).","title":"Optimize parameter table"},{"location":"future/","text":"Future work Short term Improve documentation Rework configuration file implementation Allow detecting the nominal values of parameters instead of duplicating it in the configuration file. Medium term Developer documentation Improve verifiction function methods Function parity with SFQHDLC Targeted optimization optimization improvements Long term Improved distributions for yield analysis, margin analysis and optimization. General distribution function (Needs advanced TCAD to get distribution first) Non-dependent on parameter size Generalized expression parsing User defined margin direction vectors Dependent parameters during optimization","title":"Future work"},{"location":"future/#future-work","text":"","title":"Future work"},{"location":"future/#short-term","text":"Improve documentation Rework configuration file implementation Allow detecting the nominal values of parameters instead of duplicating it in the configuration file.","title":"Short term"},{"location":"future/#medium-term","text":"Developer documentation Improve verifiction function methods Function parity with SFQHDLC Targeted optimization optimization improvements","title":"Medium term"},{"location":"future/#long-term","text":"Improved distributions for yield analysis, margin analysis and optimization. General distribution function (Needs advanced TCAD to get distribution first) Non-dependent on parameter size Generalized expression parsing User defined margin direction vectors Dependent parameters during optimization","title":"Long term"},{"location":"references/","text":"Software JoSIM JoeyDelp/JoSIM Superconductor Circuit Simulator Articles: JoSIM\u2014Superconductor SPICE Simulator pyjosim pleroux/pyjsoim Python binding for the JoSIM library PSCAN2 www.pscan2sim.org/index.html PSCAN2 is a superconductor circuit simulator, based on ideas and experience from development of PSCAN, PSCAN96, and Julia simulators, written by Pavel Shevchenko. It is implemented as a Python module, which can load the circuit netlist, circuit parameters, and description of expected circuit behavior, and when perform transient simulation of the circuit. There are functions to run circuit simulation, calculate margins or circuit parameters, and optimize circuit parameters. Articles PSCAN: personal superconductor circuit analyser PSCAN'96: new software for simulation and optimization of complex RSFQ circuits Articles","title":"References"},{"location":"references/#software","text":"JoSIM JoeyDelp/JoSIM Superconductor Circuit Simulator Articles: JoSIM\u2014Superconductor SPICE Simulator pyjosim pleroux/pyjsoim Python binding for the JoSIM library PSCAN2 www.pscan2sim.org/index.html PSCAN2 is a superconductor circuit simulator, based on ideas and experience from development of PSCAN, PSCAN96, and Julia simulators, written by Pavel Shevchenko. It is implemented as a Python module, which can load the circuit netlist, circuit parameters, and description of expected circuit behavior, and when perform transient simulation of the circuit. There are functions to run circuit simulation, calculate margins or circuit parameters, and optimize circuit parameters. Articles PSCAN: personal superconductor circuit analyser PSCAN'96: new software for simulation and optimization of complex RSFQ circuits","title":"Software"},{"location":"references/#articles","text":"","title":"Articles"},{"location":"examples/cadence_aao_dff_comparison/","text":"Cadence AAO DFF comparison","title":"Cadence AAO DFF comparison"},{"location":"examples/cadence_aao_dff_comparison/#cadence-aao-dff-comparison","text":"","title":"Cadence AAO DFF comparison"}]}